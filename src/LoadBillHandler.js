// Generated by CoffeeScript 2.3.2
(function() {
  var ExecHandler, Handler, LOG, LoadBillHandler;

  Handler = require("./Handler");

  ExecHandler = require("./ExecHandler");

  LOG = LoggerUtil.getLogger("LoadBillHandler");

  LoadBillHandler = class LoadBillHandler extends Handler {
    handle(callback) {
      var billInfo, cmd, down_stat, ref;
      down_stat = {
        total: 0,
        success: 0,
        exist: 0,
        failure: 0
      };
      ref = this.data.billInfos;
      for (cmd in ref) {
        billInfo = ref[cmd];
        down_stat.total += billInfo != null ? billInfo.length : void 0;
      }
      return async.eachOf(this.data.billInfos, (billInfo, cmd, cb1) => {
        var f_cmd, ref1, rel_path;
        rel_path = "./download/" + cmd.substring(cmd.lastIndexOf("EPCOS") - 1);
        f_cmd = (ref1 = this.data.conf.remote) != null ? ref1.fetch_bill : void 0;
        if (!f_cmd) {
          LOG.error(`项目配置未定义 [${argv.project}]: remote.fetch_bill`);
          cb1(`项目配置未定义 [${argv.project}]: remote.fetch_bill`);
        }
        LOG.info(`down_path: ${rel_path}`);
        return mkdirp(rel_path, (err) => {
          var exec;
          if (err) {
            throw err;
          }
          exec = new ExecHandler().queue_exec(3);
          return async.eachLimit(billInfo, this.data.conf.remote.max_connections, (bill, cb2) => {
            // 检查保单是否存在
            return mongoDao[argv.project].history.count({
              bill_name: bill.bill_name.replace(".xml", "")
            }, (err, count) => {
              var fetch;
              if (err) {
                throw err;
              }
              if (count > 0) {
                down_stat.exist++;
                cb2();
              }
              try {
                fetch = sprintf.sprintf(cmd + f_cmd, {
                  bill_name: bill.bill_name,
                  down_name: rel_path + bill.bill_name
                });
              } catch (error) {
                err = error;
                LOG.info(err);
              }
              return exec(fetch, (err, stdout, stderr, spent) => {
                if (err) {
                  return cb2(err);
                }
                down_stat.success++;
                return cb2();
              });
            });
          }, cb1);
        });
      }, function() {
        down_stat.failure = down_stat.total - down_stat.success - down_stat.exist;
        LOG.info(JSON.stringify(down_stat));
        return callback.apply(this, arguments);
      });
    }

  };

  module.exports = LoadBillHandler;

}).call(this);
