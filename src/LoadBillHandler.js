// Generated by CoffeeScript 2.3.2
(function() {
  var ExecHandler, Handler, LOG, LoadBillHandler;

  Handler = require("./Handler");

  ExecHandler = require("./ExecHandler");

  LOG = LoggerUtil.getLogger("LoadBillHandler");

  LoadBillHandler = class LoadBillHandler extends Handler {
    handle(callback) {
      return async.eachOf(this.data.billInfos, (billInfo, cmd, cb1) => {
        var f_cmd, ref, rel_path;
        rel_path = "./download/" + cmd.substring(cmd.lastIndexOf("EPCOS") - 1);
        f_cmd = (ref = this.data.conf.remote) != null ? ref.fetch_bill : void 0;
        return mkdirp(rel_path, (err) => {
          var exec;
          if (err) {
            throw err;
          }
          exec = new ExecHandler().queue_exec(3);
          return async.eachLimit(billInfo, this.data.conf.remote.max_connections, (bill, cb2) => {
            LOG.info(`下载 ${bill.bill_name}`);
            // 检查保单是否存在
            return mongoDao[argv.project].history.count({
              bill_name: bill.bill_name.replace(".xml", "")
            }, (err, count) => {
              var fetch;
              if (err) {
                return callback(err);
              }
              if (!f_cmd) {
                LOG.error(`项目配置未定义 [${entry.conf.project}]: remote.fetch_bill`);
                cb(`项目配置未定义 [${entry.conf.project}]: remote.fetch_bill`);
              }
              try {
                fetch = sprintf.sprintf(cmd + f_cmd, {
                  bill_name: bill.bill_name,
                  down_name: rel_path + bill.bill_name
                });
              } catch (error) {
                err = error;
                LOG.info(err);
              }
              return exec(fetch, (err, stdout, stderr, spent) => {
                if (err) {
                  return cb2(err);
                }
                this.data.conf.data.total.files += 1;
                return cb2();
              });
            });
          }, cb1);
        });
      }, callback);
    }

  };

  module.exports = LoadBillHandler;

}).call(this);
