// Generated by CoffeeScript 2.3.2
(function() {
  var ExecHandler, LOG, exec;

  exec = require("child_process").exec;

  LOG = LoggerUtil.getLogger("ExecHandler");

  ExecHandler = (function() {
    class ExecHandler {
      create_queue(n) {
        var that;
        that = this;
        return async.queue(function(task, next) {
          var check_timer, child, start_at;
          check_timer = setTimeout(function() {
            return child.kill("SIGHUP");
          }, task.timeout);
          LOG.info(task.cmd);
          start_at = Date.now();
          return child = exec(task.cmd, that.opts, function(error, stdout = "", stderr = "") {
            var e, spent;
            clearTimeout(check_timer);
            stderr = stderr.trim();
            if (error) {
              LOG.info(`錯誤: ${task.cmd} ${error}\n${stderr}`);
            }
            spent = Date.now() - start_at;
            try {
              task.callback(error, stdout, stderr, spent);
            } catch (error1) {
              e = error1;
              LOG.info(e.stack);
            }
            return process.nextTick(next);
          });
        }, n);
      }

      /*
       * 創建一個 n 併發的執行隊列
       */
      queue_exec(n = 1) {
        var exec_queue;
        exec_queue = this.create_queue(n);
        return function(cmd, callback, opts = {}) {
          var task;
          task = {
            cmd,
            callback,
            timeout: 12000
          };
          _.assign(task, opts);
          if (opts != null ? opts.prior : void 0) {
            return exec_queue.unshift(task);
          } else {
            return exec_queue.push(task);
          }
        };
      }

    };

    ExecHandler.prototype.opts = {
      encoding: "binary",
      maxBuffer: 1024 * 1024 * 8 // 8M buffer
    };

    return ExecHandler;

  }).call(this);

  module.exports = ExecHandler;

}).call(this);
