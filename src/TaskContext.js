// Generated by CoffeeScript 2.3.2
(function() {
  var BussinessContext, EnterContext, LOG, ObjectId, TaskContext, exec;

  BussinessContext = require('./BussinessContext');

  EnterContext = require("./EnterContext");

  exec = require("child_process").exec;

  ObjectId = require('mongodb').ObjectId;

  LOG = LoggerUtil.getLogger("TaskContext");

  TaskContext = class TaskContext extends BussinessContext {
    mergeImage(param, callback) {
      var that;
      that = this;
      param.filter.stage = "over";
      return new EnterContext().getResultData(param, function(err, docs) {
        var e_s_map, fc, fc001, fc002, fc003, j, len, re, val;
        if (err) {
          LOG.error(err);
        }
        if (err) {
          return callback(err);
        }
        if (!docs || docs.length === 0) {
          return callback(null);
        }
        e_s_map = {};
        for (j = 0, len = docs.length; j < len; j++) {
          re = docs[j];
          fc001 = re.enter.filter(function(e) {
            return e.field_id === "fc001";
          })[0];
          fc002 = re.enter.filter(function(e) {
            return e.field_id === "fc002";
          })[0];
          fc003 = re.enter.filter(function(e) {
            return e.field_id === "fc003";
          })[0];
          fc = fc002 || fc001;
          if (!fc) {
            continue;
          }
          val = fc.value.op4 ? fc.value.op4 : fc.value.op2;
          e_s_map[val] = e_s_map[val] || [];
          e_s_map[val].push(re.source_img);
        }
        return that.selectList({
          col: "entity",
          filter: {
            _id: {
              $in: docs.map(function(re) {
                return ObjectId(re.source_img);
              })
            }
          }
        }, function(err, ims) {
          var getOriginal_filter, i, im, k, key, l, len1, len2, o_m_map, vv;
          if (err) {
            LOG.error(err);
          }
          if (err) {
            return callback(err);
          }
          if (!ims || ims.length === 0) {
            return callback(null);
          }
          getOriginal_filter = {
            _id: {
              $in: []
            }
          };
          o_m_map = {};
          for (k = 0, len1 = ims.length; k < len1; k++) {
            im = ims[k];
            o_m_map[im._id.toString()] = im.source_img;
            getOriginal_filter._id.$in.push(ObjectId(im.source_img));
          }
          for (key in e_s_map) {
            val = e_s_map[key];
            for (i = l = 0, len2 = val.length; l < len2; i = ++l) {
              vv = val[i];
              val[i] = o_m_map[vv];
            }
          }
          return that.selectList({
            col: "entity",
            filter: getOriginal_filter
          }, function(err, originals) {
            var img_dir, len3, len4, m, merge_cmd, n, o_n_map, orig, res_path;
            if (err) {
              LOG.error(err);
            }
            if (err) {
              return callback(err);
            }
            if (!originals || originals.length === 0) {
              return callback(null);
            }
            o_n_map = {};
            for (m = 0, len3 = originals.length; m < len3; m++) {
              orig = originals[m];
              o_n_map[orig._id.toString()] = orig.img_name;
            }
            for (key in e_s_map) {
              val = e_s_map[key];
              for (i = n = 0, len4 = val.length; n < len4; i = ++n) {
                vv = val[i];
                val[i] = o_n_map[vv];
              }
            }
            res_path = originals[0].s_url.replace("image", "resultData");
            img_dir = originals[0].s_url.replace("image/", "");
            merge_cmd = "cd " + img_dir + " && gm convert %(imgs)s -quality 100 %(outFile)s";
            return mkdirp(res_path, function(err) {
              if (err) {
                return callback(err);
              }
              return async.eachOf(e_s_map, function(images, file_name, cb) {
                var cmd, e;
                try {
                  cmd = sprintf.sprintf(merge_cmd, {
                    imgs: "image/" + images.join(" image/"),
                    outFile: "resultData/" + file_name + ".PDF"
                  });
                  return exec(cmd, function(err, stdout, stderr, spent) {
                    if (err) {
                      LOG.error(e.stack);
                      return cb("ERROR：" + file_name);
                    }
                    return cb(err);
                  });
                } catch (error) {
                  e = error;
                  LOG.error(e.stack);
                  return cb("ERROR：" + file_name);
                }
              }, function(err) {
                if (err) {
                  LOG.error(err);
                  return callback(err);
                }
                return that.update({
                  col: "task",
                  filter: {
                    _id: param.filter.task
                  },
                  setter: {
                    $set: {
                      state: "已合并"
                    }
                  }
                }, callback);
              });
            });
          });
        });
      });
    }

  };

  module.exports = TaskContext;

}).call(this);
