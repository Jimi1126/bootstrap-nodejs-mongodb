// Generated by CoffeeScript 2.3.2
(function() {
  // 配置加载者
  var Handler, LOG, LoadConfigHandler;

  Handler = require("./Handler");

  LOG = LoggerUtil.getLogger("LoadConfigHandler");

  LoadConfigHandler = class LoadConfigHandler extends Handler {
    handle(callback) {
      var filter, that;
      this.data.conf = {
        // 項目配置
        conf: {},
        remote: {},
        data: {
          // 下載項
          items: [],
          // 網速統計
          total: {
            files: 0,
            spent: 0
          }
        }
      };
      that = this;
      filter = {};
      if (argv.project) {
        filter = {
          name: argv.project
        };
      }
      return mongoDao.projects.deploy.selectList(filter, function(err, docs) {
        return async.eachSeries(docs, function(doc, next) {
          return that.load_pro_conf(doc.name, function() {
            // that.data.common[ proj_name ] = _.cloneDeep that.data.conf
            // that.data.conf = { remote:{} }
            return setTimeout(next, 0);
          });
        }, callback);
      });
    }

    load_pro_conf(projName, callback) {
      var that;
      that = this;
      return async.series([
        // 項目配置 project
        function(next) {
          var start_at;
          start_at = moment();
          return mongoDao.projects.conf.selectOne({
            project: projName,
            conf: "project"
          },
        function(err,
        doc = {}) {
            var ref;
            LOG.info(`加載${projName}項目配置 --${moment() - start_at}ms`);
            if (err) {
              return next(err);
            }
            if (doc._id) {
              delete doc._id;
            }
            _.assign(that.data.conf,
        doc);
            that.data.conf.remote.scan = ["curl ftp://myftp:myftp@192.168.202.3/EPCOS/HqEpcos/T/one/Type1/",
        "curl ftp://myftp:myftp@192.168.202.3/EPCOS/HqEpcos/T/one/Type2/",
        "curl ftp://myftp:myftp@192.168.202.3/EPCOS/HqEpcos/WI/one/Type1/",
        "curl ftp://myftp:myftp@192.168.202.3/EPCOS/HqEpcos/WI/one/Type2/"];
            that.data.conf.remote.fetch_bill = "%(bill_name)s -o %(down_name)s";
            that.data.conf.remote.max_connections = ((ref = that.data.conf.remote) != null ? ref.max_connections : void 0) || 3;
            if (!that.data.conf.report_to) {
              that.data.conf.report_to = "";
            }
            if (!that.data.conf.priority) {
              that.data.conf.priority = {};
            }
            if (!that.data.conf.priority.agencies) {
              that.data.conf.priority.agencies = [];
            }
            if (!that.data.conf.priority.types) {
              that.data.conf.priority.types = [];
            }
            if (!that.data.conf.priority.bills) {
              that.data.conf.priority.bills = [];
            }
            if (!that.data.conf.priority.files) {
              that.data.conf.priority.files = [];
            }
            return next();
          });
        },
        // 字段定义列表 fields
        function(next) {
          var start_at;
          start_at = moment();
          return mongoDao.projects.conf.selectOne({
            project: projName,
            conf: "fields"
          },
        function(err,
        doc = {}) {
            var i,
        k,
        len,
        ref;
            LOG.info(`加載${projName}項目字段定義 --${moment() - start_at}ms`);
            if (err) {
              return next(err);
            }
            ref = ["_id", "project", "conf", "v"];
            for (i = 0, len = ref.length; i < len; i++) {
              k = ref[i];
              delete doc[k];
            }
            that.data.conf.fields = doc;
            return next();
          });
        },
        // 項目模板配置 bill
        function(next) {
          var start_at;
          start_at = moment();
          return mongoDao.projects.conf.selectOne({
            project: projName,
            conf: "bill"
          },
        function(err,
        doc = {}) {
            var block,
        i,
        j,
        k,
        l,
        len,
        len1,
        len2,
        ref,
        ref1,
        ref2,
        template;
            LOG.info(`加載${projName}項目模板 --${moment() - start_at}ms`);
            if (err) {
              return next(err);
            }
            ref = ["_id", "project", "conf", "v"];
            for (i = 0, len = ref.length; i < len; i++) {
              k = ref[i];
              delete doc[k];
            }
            that.data.conf.bill = doc;
            ref1 = doc.templates || doc.template || [];
            for (j = 0, len1 = ref1.length; j < len1; j++) {
              template = ref1[j];
              ref2 = template.blocks;
              //去掉過時的白名單
              for (l = 0, len2 = ref2.length; l < len2; l++) {
                block = ref2[l];
                delete block.white_list;
              }
            }
            // 按照錄入順序排序
            // block_orders = get_tmpl_block_orders template.name
            // template.blocks.sort (a, b) ->
            // 	block_orders.indexOf a.code - block_orders.indexOf b.code
            return next();
          });
        }
      ], callback);
    }

  };

  module.exports = LoadConfigHandler;

}).call(this);
