// Generated by CoffeeScript 2.3.2
(function() {
  // 配置加载者
  var Handler, LOG, LoadConfigHandler;

  Handler = require("./Handler");

  LOG = LoggerUtil.getLogger("LoadConfigHandler");

  LoadConfigHandler = class LoadConfigHandler extends Handler {
    handle(callback) {
      var dao, start, that;
      that = this;
      dao = new MongoDao(__b_config.dbInfo, {
        epcos: ["deploy"]
      });
      start = moment();
      return dao.epcos.deploy.selectOne({
        type: "proj",
        projName: argv.project
      }, function(err, doc) {
        if (err) {
          return callback(err);
        }
        that.data.deploy = {};
        if (!doc) {
          return callback();
        }
        that.data.deploy.project = doc;
        return dao.epcos.deploy.selectList({
          project: doc._id.toString()
        }, function(err, docs) {
          if (err) {
            return callback(err);
          }
          that.data.deploy.images = [];
          that.data.deploy.bills = [];
          that.data.deploy.fields = [];
          docs.forEach && docs.forEach(function(doc) {
            switch (doc.type) {
              case "image":
                return that.data.deploy.images.push(doc);
              case "bill":
                return that.data.deploy.bills.push(doc);
              case "field":
                return that.data.deploy.fields.push(doc);
            }
          });
          LOG.info(`加载${argv.project}项目配置 --${moment() - start}ms`);
          return callback();
        });
      });
    }

    load_pro_conf(projName, callback) {
      var that;
      that = this;
      return async.series([
        // 項目配置 project
        function(next) {
          var start;
          start = moment();
          return mongoDao.projects.conf.selectBySortOrLimit({
            project: projName,
            conf: "project"
          },
        {
            "update_at": -1
          },
        1,
        function(err,
        docs = []) {
            var doc,
        ref;
            LOG.info(`加载${projName}项目配置 --${moment() - start}ms`);
            if (err) {
              return next(err);
            }
            doc = docs[0];
            if (doc._id) {
              delete doc._id;
            }
            _.assign(that.data.conf,
        doc);
            that.data.conf.remote.scan = ["curl ftp://myftp:myftp@192.168.202.3/EPCOS/HqEpcos/T/one/Type1/",
        "curl ftp://myftp:myftp@192.168.202.3/EPCOS/HqEpcos/T/one/Type2/",
        "curl ftp://myftp:myftp@192.168.202.3/EPCOS/HqEpcos/WI/one/Type1/",
        "curl ftp://myftp:myftp@192.168.202.3/EPCOS/HqEpcos/WI/one/Type2/"];
            that.data.conf.remote.fetch_bill = "%(bill_name)s -o %(down_name)s";
            that.data.conf.remote.max_connections = ((ref = that.data.conf.remote) != null ? ref.max_connections : void 0) || 3;
            if (!that.data.conf.report_to) {
              that.data.conf.report_to = "";
            }
            if (!that.data.conf.priority) {
              that.data.conf.priority = {};
            }
            if (!that.data.conf.priority.agencies) {
              that.data.conf.priority.agencies = [];
            }
            if (!that.data.conf.priority.types) {
              that.data.conf.priority.types = [];
            }
            if (!that.data.conf.priority.bills) {
              that.data.conf.priority.bills = [];
            }
            if (!that.data.conf.priority.files) {
              that.data.conf.priority.files = [];
            }
            return next();
          });
        },
        // 字段定义列表 fields
        function(next) {
          var start;
          start = moment();
          return mongoDao.projects.conf.selectBySortOrLimit({
            project: projName,
            conf: "fields"
          },
        {
            "update_at": -1
          },
        1,
        function(err,
        docs = []) {
            var doc,
        i,
        k,
        len,
        ref;
            LOG.info(`加载${projName}项目字段定义 --${moment() - start}ms`);
            if (err) {
              return next(err);
            }
            doc = docs[0];
            ref = ["_id", "project", "conf", "v"];
            for (i = 0, len = ref.length; i < len; i++) {
              k = ref[i];
              delete doc[k];
            }
            that.data.conf.fields = doc;
            return next();
          });
        },
        // 項目模板配置 bill
        function(next) {
          var start;
          start = moment();
          return mongoDao.projects.conf.selectBySortOrLimit({
            project: projName,
            conf: "bill"
          },
        {
            "update_at": -1
          },
        1,
        function(err,
        docs = []) {
            var block,
        doc,
        i,
        j,
        k,
        l,
        len,
        len1,
        len2,
        ref,
        ref1,
        ref2,
        template;
            LOG.info(`加载${projName}项目模板 --${moment() - start}ms`);
            if (err) {
              return next(err);
            }
            doc = docs[0];
            ref = ["_id", "project", "conf", "v"];
            for (i = 0, len = ref.length; i < len; i++) {
              k = ref[i];
              delete doc[k];
            }
            that.data.conf.bill = doc;
            ref1 = doc.templates || doc.template || [];
            for (j = 0, len1 = ref1.length; j < len1; j++) {
              template = ref1[j];
              ref2 = template.blocks;
              for (l = 0, len2 = ref2.length; l < len2; l++) {
                block = ref2[l];
                delete block.white_list;
              }
            }
            // block_orders = get_tmpl_block_orders template.name
            // template.blocks.sort (a, b) ->
            // 	block_orders.indexOf a.code - block_orders.indexOf b.code
            return next();
          });
        }
      ], callback);
    }

  };

  module.exports = LoadConfigHandler;

}).call(this);
