// Generated by CoffeeScript 2.3.2
(function() {
  var EnterEntityHandler, ExecHandler, Handler, LOG;

  Handler = require("./Handler");

  ExecHandler = require("./ExecHandler");

  LOG = LoggerUtil.getLogger("EnterEntityHandler");

  EnterEntityHandler = class EnterEntityHandler extends Handler {
    handle(callback) {
      var dao, enterEntitys, filter, that;
      that = this;
      that.data.enterEntitys = enterEntitys = [];
      if (!this.data.images || this.data.images.length === 0) {
        return callback(null);
      }
      dao = new MongoDao(__b_config.dbInfo, {
        epcos: ["deploy", "resultData"]
      });
      filter = {
        project: that.data.deploy.project._id.toString(),
        type: "enter",
        state: "1" //启用
      };
      return dao.epcos.deploy.selectList(filter, function(err, docs) {
        var conf, confMap, confs, entity, i, j, key, len, len1, ref;
        if (err) {
          LOG.error(err);
          return callback(null);
        }
        confMap = {};
        for (i = 0, len = docs.length; i < len; i++) {
          conf = docs[i];
          confMap[conf.file_id] || (confMap[conf.file_id] = []);
          confMap[conf.file_id].push({
            field_id: conf.field_id,
            field_name: conf.field_name,
            src_type: conf.src_type,
            value: {},
            tip: ""
          });
        }
        for (key in confMap) {
          confs = confMap[key];
          ref = that.data[confs[0].src_type + "s"];
          for (j = 0, len1 = ref.length; j < len1; j++) {
            entity = ref[j];
            if (entity.deploy_id !== key) {
              continue;
            }
            enterEntitys.push({
              _id: Utils.uuid(24, 16),
              project: filter.project,
              deploy_id: entity.deploy_id,
              code: entity.code,
              source_img: entity.source_img,
              path: entity.path,
              img_name: entity.img_name,
              enter: confs,
              stage: "ocr",
              priority: "1",
              create_at: moment().format("YYYYMMDDHHmmss")
            });
            entity.isDeploy = 1;
          }
        }
        return callback(null);
      });
    }

  };

  module.exports = EnterEntityHandler;

}).call(this);
