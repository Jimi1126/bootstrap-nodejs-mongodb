// Generated by CoffeeScript 2.3.2
(function() {
  var ConvertHandler, ExecHandler, Handler, LOG;

  Handler = require("./Handler");

  ExecHandler = require("./ExecHandler");

  LOG = LoggerUtil.getLogger("ConvertHandler");

  ConvertHandler = class ConvertHandler extends Handler {
    handle(callback) {
      var conv_stat, exec;
      if (!this.data.images) {
        LOG.warn(`${argv.project}：没有需要解析的内容`);
        return callback(null);
      }
      exec = new ExecHandler().queue_exec(3);
      conv_stat = {
        total: 0,
        success: 0,
        failure: 0
      };
      return async.each(this.data.images, function(image, cb) {
        var name, rel_path;
        if (image.state !== 1 && image.state !== -2) {
          return cb(null);
        }
        if (image.img_name && image.img_name.endsWith("pdf")) {
          conv_stat.total++;
          rel_path = image.s_url;
          name = image.img_name.replace(".pdf", "");
          return mkdirp(`${rel_path}${name}`, function(err) {
            var conv_cmd;
            if (err && (image.state = -2)) { //解析失败
              return cb(err);
            }
            conv_cmd = `gswin64c -o ${rel_path}${name}/${name}_%d.jpg -sDEVICE=jpeg ${rel_path}${image.img_name}`;
            return exec(conv_cmd, function(err, stdout, stderr, spent) {
              image.state = 2; //解析完成
              if (err && (image.state = -2)) { //解析失败
                return cb(err);
              }
              stdout = `${stdout}`.trim();
              stderr = `${stderr}`.trim();
              if (stdout.length > 0) {
                LOG.info(stdout);
              }
              if (stderr.length > 0) {
                LOG.info(stderr);
              }
              conv_stat.success++;
              return cb(err);
            });
          });
        } else {
          image.state = 2; //解析完成
          return cb(null);
        }
      }, function(err) {
        if (err) {
          LOG.error(JSON.stringify(err));
        }
        conv_stat.failure = conv_stat.total - conv_stat.success;
        LOG.info(JSON.stringify(conv_stat));
        return callback.apply(this, arguments);
      });
    }

  };

  module.exports = ConvertHandler;

}).call(this);
