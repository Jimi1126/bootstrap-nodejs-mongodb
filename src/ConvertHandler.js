// Generated by CoffeeScript 2.3.2
(function() {
  var ConvertHandler, ExecHandler, Handler, LOG;

  Handler = require("./Handler");

  ExecHandler = require("./ExecHandler");

  LOG = LoggerUtil.getLogger("ConvertHandler");

  ConvertHandler = class ConvertHandler extends Handler {
    handle(callback) {
      var conv_stat, exec;
      exec = new ExecHandler().queue_exec(3);
      conv_stat = {
        total: 0,
        success: 0,
        failure: 0
      };
      return async.eachOf(this.data.billInfos, (billInfo, cmd, cb1) => {
        var rel_path;
        rel_path = path.join(workspace, "download" + cmd.substring(cmd.lastIndexOf("EPCOS") - 1));
        return async.each(billInfo, (bill, cb2) => {
          var bill_name, conv_cmd;
          if (bill.bill_name && bill.bill_name.endsWith("pdf")) {
            conv_stat.total++;
            bill_name = bill.bill_name.replace(".pdf", "");
            // bill.bill_name = []
            conv_cmd = "gswin64c -o %(bill_name)s_%%d.jpg -sDEVICE=%(type)s %(bill_name)s.pdf";
            conv_cmd = sprintf.sprintf(conv_cmd, {
              bill_name: rel_path + bill_name,
              type: "jpeg"
            });
            return exec(conv_cmd, function(err, stdout, stderr, spent) {
              if (err) {
                bill.status = "异常";
                return cb2();
              }
              stdout = `${stdout}`.trim();
              stderr = `${stderr}`.trim();
              if (stdout.length > 0) {
                LOG.info(stdout);
              }
              if (stderr.length > 0) {
                LOG.info(stderr);
              }
              conv_stat.success++;
              return cb2();
            });
          } else {
            return cb2();
          }
        }, cb1);
      }, function() {
        conv_stat.failure = conv_stat.total - conv_stat.success;
        LOG.info(JSON.stringify(conv_stat));
        return callback.apply(this, arguments);
      });
    }

  };

  module.exports = ConvertHandler;

}).call(this);
