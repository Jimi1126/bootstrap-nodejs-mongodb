// Generated by CoffeeScript 2.3.2
(function() {

  /*
   * 策略代理类
   */
  var LOG, Proxy, StrategyProxy;

  Proxy = require("./Proxy");

  LOG = LoggerUtil.getLogger("StrategyProxy");

  StrategyProxy = (function() {
    class StrategyProxy extends Proxy {
      constructor(target) {
        super(target);
      }

      proxy(f) {
        var that;
        that = this;
        return function() {
          var callback, cb, params, startTime;
          //# 默认只代理策略的执行方法，并只添加日志记录能力
          if (f.name === "execute") {
            LOG.info(`策略${that.target.constructor.name}.${f.name}开始执行`);
            that.io && that.io.socket.emit(0, `策略${that.target.constructor.name}.${f.name}开始执行`);
            startTime = moment();
            [...params] = arguments;
            callback = params.pop();
            cb = function() {
              var endTime;
              endTime = moment();
              LOG.info(`策略${that.target.constructor.name}.${f.name}执行结束 --${endTime - startTime}ms`);
              that.io && that.io.socket.emit(1, `策略${that.target.constructor.name}.${f.name}执行结束 --${endTime - startTime}ms`);
              return typeof callback === "function" && callback.apply(this, arguments);
            };
            params.push(cb);
            return f.apply(that.target, params);
          } else {
            return f.apply(that.target, arguments);
          }
        };
      }

    };

    StrategyProxy.prototype.io = null;

    return StrategyProxy;

  }).call(this);

  module.exports = StrategyProxy;

}).call(this);
