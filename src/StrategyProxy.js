// Generated by CoffeeScript 2.3.2
(function() {
  var LOG, Proxy, StrategyProxy;

  Proxy = require("./Proxy");

  LOG = LoggerUtil.getLogger("StrategyProxy");

  /*
   * 策略代理
   * 将该代理的父类原型指向目标对象父类的原型，明确该代理的类型
   * 至此该Proxy将为目标对象类型，且不再是Proxy类型
   */
  StrategyProxy = class StrategyProxy extends Proxy {
    constructor(target) {
      super(target);
      this.__proto__ = target.__proto__;
    }

    proxy(f) {
      var that;
      that = this;
      return function() {
        var callback, cb, params, startTime;
        if (f.name === "execute") {
          LOG.info(`策略${that.target.constructor.name}.${f.name}开始执行`);
          startTime = moment();
          [...params] = arguments;
          callback = params.pop();
          cb = () => {
            var endTime;
            endTime = moment();
            LOG.info(`策略${that.target.constructor.name}.${f.name}执行结束 --${endTime - startTime}ms`);
            return typeof callback === "function" && callback.apply(this, arguments);
          };
          params.push(cb);
          return f.apply(that.target, params);
        } else {
          return f.apply(that.target, arguments);
        }
      };
    }

  };

  module.exports = StrategyProxy;

}).call(this);
