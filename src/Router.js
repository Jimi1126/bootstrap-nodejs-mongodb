// Generated by CoffeeScript 2.3.2
(function() {
  var ConfigContext, LOG, ObjectId, Router, bodyParser, cookieParser, express, session;

  express = require("express");

  bodyParser = require('body-parser');

  cookieParser = require("cookie-parser");

  session = require("express-session");

  ObjectId = require('mongodb').ObjectId;

  ConfigContext = require("./ConfigContext");

  LOG = LoggerUtil.getLogger("Router");

  Router = class Router {
    constructor() {
      this.preRouter();
    }

    preRouter() {
      app.use('/js', express.static(path.join(workspace, 'web/js')));
      app.use('/css', express.static(path.join(workspace, 'web/css')));
      app.use('/fonts', express.static(path.join(workspace, 'web/fonts')));
      app.use('/images', express.static(path.join(workspace, 'web/images')));
      app.set('view engine', 'html');
      app.use('/pages', function(req, res, next) {
        res.setHeader("Content-Type", "text/html");
        return next();
      });
      app.use('/pages', express.static(path.join(workspace, 'web/pages')));
      /*
       * 开启跨域，便于接口访问.
       */
      return app.all('*', function(req, res, next) {
        res.header('Access-Control-Allow-Origin', '*'); //控制访问来源：所有
        res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept'); //访问控制允许报头 X-Requested-With: xhr请求 
        res.header('Access-Control_Allow-Metheds', 'GET, POST, PUT, DELETE, OPTIONS'); //访问控制允许方法 
        res.header('X-Powered-By', 'nodejs'); //自定义头信息，表示服务端用nodejs 
        res.header('Content-Type', 'application/json;charset=utf-8');
        return next();
      });
    }

    router() {
      var configRouter;
      app.use(bodyParser.json());
      app.use(bodyParser.urlencoded({
        extended: true
      }));
      app.use(cookieParser());
      configRouter = express.Router(); // 配置请求路由
      //# 获取项目信息
      configRouter.get("/getProjList", function(req, res) {
        var configContext, param;
        configContext = new ConfigContext();
        param = Object.keys(req.query).length === 0 ? req.body : req.query;
        return configContext.getProjList(param, function(err, conf) {
          if (err) {
            LOG.error(err);
            return res.json(null);
          } else {
            return res.json(conf);
          }
        });
      });
      //# 获取配置信息
      configRouter.get("/getDeploy", function(req, res) {
        var configContext, param;
        configContext = new ConfigContext();
        param = Object.keys(req.query).length === 0 ? req.body : req.query;
        return configContext.getDeploy(param, function(err, conf) {
          if (err) {
            LOG.error(err);
            return res.json(null);
          } else {
            return res.json(conf);
          }
        });
      });
      //# 保存配置信息
      configRouter.post("/saveDeploy", function(req, res) {
        var configContext, data, filter, type, verify;
        configContext = new ConfigContext();
        data = Object.keys(req.query).length === 0 ? req.body : req.query;
        type = data.type;
        verify = {
          db: "epcos",
          col: "deploy"
        };
        if (type === "proj") {
          verify.filter;
          verify.filter = {
            $or: [
              {
                projName: data.projName
              },
              {
                projCode: data.projCode
              }
            ]
          };
        } else {
          filter = {
            type: type
          };
          if (type === "image") {
            filter["project"] = data.project;
          }
          if (type === "bill") {
            filter["project"] = data.project;
            filter["image"] = data.image;
          }
          if (type === "field") {
            filter["project"] = data.project;
            filter["image"] = data.image;
            filter["bill"] = data.bill;
          }
          filter.code = data.code;
          verify.filter = filter;
        }
        return configContext.exist(verify, function(err, exist) {
          if (err) {
            LOG.error(err);
            return res.json(null);
          } else if (exist) {
            return res.json("exist");
          } else {
            return configContext.saveDeploy(data, function(err) {
              if (err) {
                LOG.error(err);
              }
              return res.json(null);
            });
          }
        });
      });
      //# 更新项目信息
      configRouter.post("/updateDeploy", function(req, res) {
        var configContext, data;
        configContext = new ConfigContext();
        data = Object.keys(req.query).length === 0 ? req.body : req.query;
        return configContext.updateDeploy({
          _id: data._id
        }, data, function(err) {
          if (err) {
            LOG.error(err);
          }
          return res.json(null);
        });
      });
      //# 删除项目配置
      configRouter.post("/deleteDeploy", function(req, res) {
        var configContext, data, filter, type;
        configContext = new ConfigContext();
        data = Object.keys(req.query).length === 0 ? req.body : req.query;
        type = data.type;
        filter = {};
        if (type === "proj") {
          filter.$or = [
            {
              _id: ObjectId(data._id)
            },
            {
              project: data._id
            }
          ];
        }
        if (type === "image") {
          filter.$or = [
            {
              _id: ObjectId(data._id)
            },
            {
              project: data.project,
              image: data._id
            }
          ];
        }
        if (type === "bill") {
          filter.$or = [
            {
              _id: ObjectId(data._id)
            },
            {
              project: data.project,
              image: data.image,
              bill: data._id
            }
          ];
        }
        if (type === "field") {
          filter._id = data._id;
        }
        if (Object.keys(filter).length === 0) {
          return res.json(null);
        }
        return configContext.deleteDeploy(filter, function(err) {
          if (err) {
            LOG.error(err);
          }
          return res.json(null);
        });
      });
      return app.use("/config", configRouter);
    }

  };

  module.exports = Router;

}).call(this);
