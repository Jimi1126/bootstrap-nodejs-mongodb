// Generated by CoffeeScript 2.3.2
(function() {
  var ConfigContext, DownloadContext, EnterContext, ExecHandler, LOG, ObjectId, Router, SysConfigContext, TaskContext, UserContext, bodyParser, cookieParser, express, multer, session;

  express = require("express");

  bodyParser = require('body-parser');

  cookieParser = require("cookie-parser");

  session = require("express-session");

  multer = require("multer");

  ObjectId = require('mongodb').ObjectId;

  DownloadContext = require("./DownloadContext");

  ConfigContext = require("./ConfigContext");

  EnterContext = require("./EnterContext");

  SysConfigContext = require("./SysConfigContext");

  TaskContext = require("./TaskContext");

  UserContext = require("./UserContext");

  ExecHandler = require("./ExecHandler");

  LOG = LoggerUtil.getLogger("Router");

  Router = class Router {
    constructor() {
      this.preRouter();
    }

    preRouter() {
      app.use('/js', express.static(path.join(workspace, 'web/js')));
      app.use('/css', express.static(path.join(workspace, 'web/css')));
      app.use('/fonts', express.static(path.join(workspace, 'web/fonts')));
      app.use('/images', express.static(path.join(workspace, 'web/images')));
      app.use('/download', express.static(path.join(workspace, 'download')));
      app.set('view engine', 'html');
      app.use(cookieParser());
      app.use(session({
        secret: "epcos-user",
        resave: true,
        key: "epcos-user",
        saveUninitialized: true,
        rolling: false,
        cookie: {
          secure: false, // http有效
          maxAge: 5 * 60 * 1000
        }
      }));
      // 拦截器
      app.use("/pages", function(req, res, next) {
        if (!req.session.user && !req.originalUrl.startsWith("/pages/login.html") && !req.originalUrl.startsWith("/pages/overTime.html")) {
          return res.redirect(302, "/pages/login.html");
        } else if (req.session.user && req.originalUrl.startsWith("/pages/login.html")) {
          req.session._garbage = Date();
          req.session.touch();
          return res.redirect(302, "/pages/homePage.html");
        } else if (req.originalUrl.startsWith("/pages/login.html") || req.originalUrl.startsWith("/pages/overTime.html")) {
          return next();
        } else {
          req.session._garbage = Date();
          req.session.touch();
          return next();
        }
      });
      app.use('/pages', function(req, res, next) {
        res.setHeader("Content-Type", "text/html");
        return next();
      });
      app.use('/pages', express.static(path.join(workspace, 'web/pages')));
      app.all("*", function(req, res, next) {
        return new SysConfigContext().accessControl(req.session.user, function(err, flags) {
          return flags;
        });
      });
      app.all("*", function(req, res, next) {
        if (req.session && req.session.user) {
          req.session._garbage = Date();
          req.session.touch();
        }
        if (req.session.user || req.originalUrl.startsWith("/user/login")) {
          return next();
        } else {
          return res.json("notlogin");
        }
      });
      /*
       * 开启跨域，便于接口访问.
       */
      return app.all('*', function(req, res, next) {
        res.header('Access-Control-Allow-Origin', '*'); //控制访问来源：所有
        res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept'); //访问控制允许报头 X-Requested-With: xhr请求 
        res.header('Access-Control_Allow-Metheds', 'GET, POST, PUT, DELETE, OPTIONS'); //访问控制允许方法 
        res.header('X-Powered-By', 'nodejs'); //自定义头信息，表示服务端用nodejs 
        res.header('Content-Type', 'application/json;charset=utf-8');
        return next();
      });
    }

    router() {
      var configRouter, storage, sysConfigRouter, taskRouter, upload, userRouter;
      app.use(bodyParser.json());
      app.use(bodyParser.urlencoded({
        extended: true
      }));
      userRouter = express.Router(); // 用户信息请求路由
      //# 登陆
      userRouter.post("/login", function(req, res) {
        var param, userContext;
        userContext = new UserContext();
        param = Object.keys(req.query).length === 0 ? req.body : req.query;
        return userContext.login(param, function(err, flags, user) {
          if (flags === "success") {
            req.session.user = user;
            req.session._garbage = Date();
            req.session.touch();
            global.sessions || (global.sessions = {});
            global.sessions[req.session.id] || (global.sessions[req.session.id] = req.session);
          }
          return res.json(flags);
        });
      });
      //# 获取session
      userRouter.get("/userInfo", function(req, res) {
        return res.json(req.session && req.session.user || {});
      });
      //# 注销
      userRouter.get("/logout", function(req, res) {
        if (!req.session) {
          return res.json("success");
        }
        return req.session.destroy(function(err) {
          if (err) {
            LOG.error(err);
            return res.json(err);
          } else {
            return res.json("success");
          }
        });
      });
      userRouter.post("/getUsers", function(req, res) {
        var context, param;
        context = new UserContext();
        param = Object.keys(req.query).length === 0 ? req.body : req.query;
        return context.getUsers(param, function(err, users) {
          if (err) {
            LOG.error(err);
            return res.json(null);
          } else {
            return res.json(users);
          }
        });
      });
      app.use("/user", userRouter);
      sysConfigRouter = express.Router(); // 系统配置请求路由
      sysConfigRouter.post("/add", function(req, res) {
        var context, param;
        context = new SysConfigContext();
        param = Object.keys(req.query).length === 0 ? req.body : req.query;
        return context.insert({
          col: "sys_config",
          data: param
        }, function(err) {
          if (err) {
            LOG.error(err);
          }
          return res.json(err);
        });
      });
      app.use("/sysconf", sysConfigRouter);
      configRouter = express.Router(); // 配置请求路由
      //# 获取配置信息
      configRouter.get("/getDeploy", function(req, res) {
        var configContext, param;
        configContext = new ConfigContext();
        param = Object.keys(req.query).length === 0 ? req.body : req.query;
        return configContext.getDeploy(param, function(err, conf) {
          if (err) {
            LOG.error(err);
            return res.json(null);
          } else {
            return res.json(conf);
          }
        });
      });
      //# 保存配置信息
      configRouter.post("/saveDeploy", function(req, res) {
        var configContext, data, filter, type, verify;
        configContext = new ConfigContext();
        data = Object.keys(req.query).length === 0 ? req.body : req.query;
        type = data.type;
        verify = {
          db: "epcos",
          col: "deploy"
        };
        if (type === "proj") {
          verify.filter = {
            $or: [
              {
                projName: data.projName
              },
              {
                projCode: data.projCode
              }
            ]
          };
        } else {
          filter = {
            type: type
          };
          if (type === "image") {
            filter["project"] = data.project;
          }
          if (type === "bill") {
            filter["project"] = data.project;
            filter["image"] = data.image;
          }
          if (type === "field") {
            filter["project"] = data.project;
            filter["image"] = data.image;
            filter["bill"] = data.bill;
          }
          filter.code = data.code;
          verify.filter = filter;
        }
        return configContext.exist(verify, function(err, exist) {
          if (err) {
            LOG.error(err);
            return res.json(null);
          } else if (exist) {
            return res.json("exist");
          } else {
            return configContext.saveDeploy(data, function(err) {
              if (err) {
                LOG.error(err);
              }
              return res.json(null);
            });
          }
        });
      });
      //# 更新配置信息
      configRouter.post("/updateDeploy", function(req, res) {
        var configContext, data;
        configContext = new ConfigContext();
        data = Object.keys(req.query).length === 0 ? req.body : req.query;
        return configContext.updateDeploy({
          _id: data._id
        }, data, function(err) {
          if (err) {
            LOG.error(err);
          }
          return res.json(null);
        });
      });
      //# 删除图片配置样例及裙带信息
      configRouter.post("/delImageTempl", function(req, res) {
        var configContext, data;
        configContext = new ConfigContext();
        data = Object.keys(req.query).length === 0 ? req.body : req.query;
        if (!data.delFile) {
          return res.json(null);
        }
        if (!data.img) {
          return res.json("error");
        }
        return async.each(data.delFile, function(path, cb) {
          return fs.unlink(path, function(err) {
            var filter;
            if (err) {
              LOG.error(err);
              return cb("error");
            }
            filter = {
              project: data.img.project,
              image: data.img._id,
              src_img: path
            };
            return configContext.getDeploy(filter, function(err, docs) {
              if (err) {
                LOG.error(err);
                return cb("error");
              }
              return async.each(docs, function(doc, cb1) {
                return fs.unlink(doc.img_path, function(err) {
                  if (err) {
                    LOG.error(err);
                    return cb1("error");
                  }
                  return configContext.deleteDeploy(doc, function(err) {
                    if (err) {
                      LOG.error(err);
                      return cb1("error");
                    }
                    return cb1(null);
                  });
                });
              }, cb);
            });
          });
        }, function(err) {
          return res.json(err);
        });
      });
      //# 删除配置信息
      configRouter.post("/deleteDeploy", function(req, res) {
        var configContext, data, filter, type;
        configContext = new ConfigContext();
        data = Object.keys(req.query).length === 0 ? req.body : req.query;
        type = data.type;
        filter = {};
        if (type === "proj") {
          filter.$or = [
            {
              _id: ObjectId(data._id)
            },
            {
              project: data._id
            }
          ];
        }
        if (type === "image") {
          filter.$or = [
            {
              _id: ObjectId(data._id)
            },
            {
              project: data.project,
              image: data._id
            }
          ];
        }
        if (type === "bill") {
          filter.$or = [
            {
              _id: ObjectId(data._id)
            },
            {
              project: data.project,
              image: data.image,
              bill: data._id
            }
          ];
        }
        if (type === "field") {
          filter._id = data._id;
        }
        if (type === "enter") {
          filter._id = data._id;
        }
        if (Object.keys(filter).length === 0) {
          return res.json(null);
        }
        return configContext.deleteDeploy(filter, function(err) {
          if (err) {
            LOG.error(err);
          }
          return res.json(null);
        });
      });
      // 文件上传
      storage = multer.diskStorage({
        destination: function(req, file, cb) {
          var data, dir;
          data = Object.keys(req.query).length === 0 ? req.body : req.query;
          dir = data.dir ? `./web/images/template/${data.dir}` : './web/images/template/';
          if (data.rmdir) {
            return fs.rmdir(data.rmdir, function(err) {
              if (err) {
                LOG.error(err);
              }
              return mkdirp(dir, function(err) {
                if (err) {
                  LOG.error(err);
                }
                return cb(err, dir);
              });
            });
          } else {
            return mkdirp(dir, function(err) {
              if (err) {
                LOG.error(err);
              }
              return cb(err, dir);
            });
          }
        },
        filename: function(req, file, cb) {
          var data, filename, str;
          data = Object.keys(req.query).length === 0 ? req.body : req.query;
          str = file.originalname.split('.');
          filename = data.filename ? data.filename : Date.now() + '.' + str[1];
          return cb(null, filename);
        }
      });
      upload = multer({
        storage: storage
      });
      configRouter.post("/uploadFile", upload.array("file", 1), function(req, res, next) {
        if (req.files && req.files.length > 0) {
          return res.json(req.files[0].path);
        } else {
          return res.json(null);
        }
      });
      // 文件删除
      configRouter.post("/delFile", function(req, res) {
        var data;
        data = Object.keys(req.query).length === 0 ? req.body : req.query;
        if (data) {
          if (!data.path) {
            return res.json(null);
          }
          if (data.type === "file") {
            return fs.unlink(data.path, function(err) {
              if (err) {
                LOG.error(err);
              }
              return res.json(err);
            });
          } else {
            return Utils.rmdir(data.path, function(err) {
              if (err) {
                LOG.error(err);
              }
              return res.json(err);
            });
          }
        } else {
          return res.json(null);
        }
      });
      // 文件名修改
      configRouter.get("/moddir", function(req, res) {
        var data, f_arr, i, t_arr;
        data = Object.keys(req.query).length === 0 ? req.body : req.query;
        if (data) {
          f_arr = data.from.split("\\");
          t_arr = data.to.split("\\");
          i = -1;
          return async.eachSeries(f_arr, function(name, cb) {
            var m_arr;
            i++;
            if (name !== t_arr[i]) {
              m_arr = t_arr.slice(0, i);
              return fs.exists(m_arr.join("\\") + "\\" + t_arr[i], function(exist) {
                if (exist) {
                  return cb("exist");
                }
                return fs.rename(m_arr.join("\\") + "\\" + name, m_arr.join("\\") + "\\" + t_arr[i], cb);
              });
            } else {
              return cb(null);
            }
          }, function(err) {
            if (err) {
              LOG.error(err);
            }
            res.setHeader(200);
            return res.json(err);
          });
        }
      });
      // 样例切图
      configRouter.post("/crop", function(req, res) {
        var data;
        data = Object.keys(req.query).length === 0 ? req.body : req.query;
        return fs.exists(data.cut_path + "\\" + data.data.code + ".jpg", function(exist) {
          if (exist) {
            return res.json("exist");
          }
          return mkdirp(data.cut_path, function(err) {
            var cut_cmd, e, exec, options;
            if (err) {
              LOG.error(err);
              return res.json("create dir error");
            }
            options = {
              src: data.src,
              dst: data.cut_path + "\\" + data.data.code + ".jpg",
              x0: data.data.x0,
              y0: data.data.y0,
              x1: data.data.x1,
              y1: data.data.y1
            };
            cut_cmd = "gmic -v - %(src)s -crop[-1] %(x0)s,%(y0)s,%(x1)s,%(y1)s -o[-1] %(dst)s";
            try {
              cut_cmd = sprintf.sprintf(cut_cmd, options);
            } catch (error) {
              e = error;
              LOG.error(e.stack);
              return res.json("create dir error");
            }
            exec = new ExecHandler().queue_exec(1);
            return exec(cut_cmd, function(err, stdout, stderr, spent) {
              if (err) {
                LOG.error(err);
                return res.json("crop error");
              }
              stdout = `${stdout}`.trim();
              stderr = `${stderr}`.trim();
              if (stdout.length > 0) {
                LOG.info(stdout);
              }
              if (stderr.length > 0) {
                LOG.info(stderr);
              }
              LOG.info(`${options.src} => ${options.dst} ${spent}ms`);
              return res.json("success");
            });
          });
        });
      });
      // 新增、修改录入配置
      configRouter.post("/addOrUpdateDeploy", function(req, res) {
        var configContext, data;
        configContext = new ConfigContext();
        data = Object.keys(req.query).length === 0 ? req.body : req.query;
        return configContext.addOrUpdateDeploy(data.data, function(err) {
          if (err) {
            LOG.error(err.stack);
            return res.json("error");
          }
          return res.json(null);
        });
      });
      // 获取录入实体
      configRouter.post("/getEnterEntity", function(req, res) {
        var context, data, entity, entity_task, entitys, num, ref, ref1, ref2, ref3;
        data = Object.keys(req.query).length === 0 ? req.body : req.query;
        context = new EnterContext();
        global.enter || (global.enter = {});
        global.enter.entitys || (global.enter.entitys = {});
        global.enter.entitys.MIN_CACHE || (global.enter.entitys.MIN_CACHE = 15);
        global.enter.entitys.MAX_CACHE || (global.enter.entitys.MAX_CACHE = 80);
        global.enter.entitys[data.project] || (global.enter.entitys[data.project] = {});
        entity_task = global.enter.entitys[data.project][data.task] || (global.enter.entitys[data.project][data.task] = {});
        entitys = global.enter.entitys[data.project][data.task][data.stage] || (global.enter.entitys[data.project][data.task][data.stage] = {
          isEmpty: false,
          data: [],
          entering: []
        });
        if (data.stage === "op4" && ((ref = entity_task["op1"]) != null ? ref.isEmpty : void 0) && ((ref1 = entity_task["op2"]) != null ? ref1.isEmpty : void 0) && ((ref2 = entity_task["op3"]) != null ? ref2.isEmpty : void 0) && ((ref3 = entity_task["op4"]) != null ? ref3.isEmpty : void 0)) {
          context.update({
            col: "task",
            filter: {
              _id: data.task
            },
            setter: {
              $set: {
                state: "已导出"
              }
            }
          }, function(err) {
            return LOG.error(err);
          });
        }
        if (entitys.isEmpty) {
          entity = entitys.data.shift() || null;
          entity && entitys.entering.push(entity);
          return res.json(entity);
        }
        if (entitys.data.length > 0) {
          entity = entitys.data.shift();
          entitys.entering.push(entity);
          res.json(entity);
        }
        if (entitys.data.length < global.enter.entitys.MIN_CACHE) {
          num = global.enter.entitys.MAX_CACHE - entitys.data.length;
          return context.getEnterEntity({
            data: data,
            limit: num
          }, function(err) {
            if (err) {
              LOG.error(err);
            }
            if (num === global.enter.entitys.MAX_CACHE) {
              entity = entitys.data.shift() || null;
              entity && entitys.entering.push(entity);
              return res.json(entity);
            }
          });
        }
      });
      // 释放录入实体
      configRouter.post("/letEnterEntity", function(req, res) {
        var data, entitys, freeObj;
        data = Object.keys(req.query).length === 0 ? req.body : req.query;
        data = data != null ? data.data : void 0;
        if (!data || !data.project || !data.stage || !global.enter) {
          return res.json("failed");
        }
        entitys = global.enter.entitys[data.project][data.task][data.stage];
        freeObj = (entitys.entering.splice(entitys.entering.findIndex(function(en) {
          return en && en._id.toString() === data._id;
        }), 1))[0];
        freeObj && entitys.data.unshift(freeObj);
        return res.json("success");
      });
      // 提交录入
      configRouter.post("/submitEnter", function(req, res) {
        var chatLength, context, dao, data, e, en, entitys, j, k, len, len1, rankArr, ref, ref1, setter, statis, symbol;
        data = Object.keys(req.query).length === 0 ? req.body : req.query;
        data = data != null ? data.data : void 0;
        if (!data || !data.project || !data.stage) {
          return res.json("failed");
        }
        rankArr = ["ocr", "op1", "op2", "op3", "op4", "over"];
        try {
          entitys = global.enter.entitys[data.project][data.task][data.stage];
          entitys.entering.splice(entitys.entering.findIndex(function(en) {
            return en._id.toString() === data._id;
          }), 1);
          chatLength = 0;
          symbol = 0;
          ref = data.enter;
          for (j = 0, len = ref.length; j < len; j++) {
            en = ref[j];
            chatLength += Utils.getLength(en.value[data.stage]);
            symbol += Utils.replaceAll(en.value[data.stage], /\?|？/, "").length === 0 ? 1 : 0;
          }
          statis = {
            project: data.project,
            task: data.task,
            stage: data.stage,
            usercode: req.session.user.username
          };
          dao = new MongoDao(__b_config.dbInfo, {
            epcos: ["outputData"]
          });
          dao.epcos.outputData.selectOne(statis, function(err, doc) {
            if (err) {
              return LOG.error(err);
            }
            statis.chatLength = 0;
            statis.symbol = 0;
            statis.count = 0;
            if (doc) {
              statis = doc;
            }
            statis.chatLength += chatLength;
            statis.symbol += symbol;
            statis.count++;
            doc && dao.epcos.outputData.update({
              _id: statis._id
            }, statis, function() {});
            return !doc && dao.epcos.outputData.insert(statis, function() {});
          });
          if (data.stage === "op2") {
            ref1 = data.enter;
            for (k = 0, len1 = ref1.length; k < len1; k++) {
              en = ref1[k];
              if (!en.value["op1"] || !en.value["op2"] || (en.value["op1"] !== en.value["op2"])) {
                data.stage = "no";
              }
            }
            data.stage === "op2" && (data.stage = "over");
            data.stage === "no" && (data.stage = "op3");
          } else {
            data.stage = rankArr[(rankArr.findIndex(function(r) {
              return r === data.stage;
            })) + 1];
          }
          entitys = global.enter.entitys[data.project][data.task][data.stage];
          entitys && (entitys.isEmpty = false);
          context = new EnterContext();
          setter = {
            $set: {
              stage: data.stage,
              enter: data.enter
            }
          };
          return context.update({
            col: "resultData",
            filter: {
              _id: data._id
            },
            setter: setter
          }, function(err) {
            return res.json(err);
          });
        } catch (error) {
          e = error;
          return res.json(e);
        }
      });
      // 保存录入实体
      configRouter.post("/saveEnterEntity", function(req, res) {
        var context, data;
        data = Object.keys(req.query).length === 0 ? req.body : req.query;
        context = new EnterContext();
        return context.saveEnterEntity(data, function(err) {
          if (err) {
            LOG.error(err);
          }
          return res.json(entity);
        });
      });
      app.use("/config", configRouter);
      //# 新建任务
      taskRouter = express.Router(); // 任务路由
      taskRouter.post("/newTask", function(req, res) {
        var data;
        data = Object.keys(req.query).length === 0 ? req.body : req.query;
        return mkdirp(data.path_name, function(err) {
          var context;
          if (err) {
            LOG.error(err);
          }
          if (err) {
            return res.json(err);
          }
          context = new EnterContext();
          return context.save({
            col: "task",
            data: data
          }, function(err) {
            if (err) {
              LOG.error(err);
            }
            return res.json(err);
          });
        });
      });
      taskRouter.post("/getTasks", function(req, res) {
        var context, data;
        data = Object.keys(req.query).length === 0 ? req.body : req.query;
        context = new EnterContext();
        return context.select({
          col: "task",
          filter: data
        }, function(err, docs) {
          if (err) {
            LOG.error(err);
          }
          return res.json(docs);
        });
      });
      //# 获取结果数据
      taskRouter.post("/getResultData", function(req, res) {
        var context, data;
        data = Object.keys(req.query).length === 0 ? req.body : req.query;
        context = new EnterContext();
        data.isPage = true;
        return context.getResultData(data, function(err, docs) {
          if (err) {
            LOG.error(err);
          }
          return res.json(docs);
        });
      });
      // 分配
      taskRouter.post("/allotImage", function(req, res) {
        var context, data, param;
        data = Object.keys(req.query).length === 0 ? req.body : req.query;
        if (!(data != null ? data.data : void 0)) {
          return res.json({
            errno: -1,
            text: "invalid param"
          });
        }
        context = new EnterContext();
        param = {
          col: "task",
          filter: {
            _id: {
              $in: data.data.map(function(task) {
                return ObjectId(task._id);
              })
            }
          },
          setter: {
            $set: {
              state: "录入中"
            }
          }
        };
        return context.update(param, function(err) {
          if (err) {
            LOG.error(err);
          }
          return res.json(err);
        });
      });
      //# 合并结果图片
      taskRouter.post("/mergeImage", function(req, res) {
        var context, data;
        data = Object.keys(req.query).length === 0 ? req.body : req.query;
        context = new TaskContext();
        if (!data.filter) {
          return res.json("error");
        }
        return context.mergeImage(data, function(err) {
          if (err) {
            return res.json(err);
          }
          return res.json("success");
        });
      });
      return app.use("/task", taskRouter);
    }

  };

  module.exports = Router;

}).call(this);
