// Generated by CoffeeScript 2.3.2
(function() {
  var ExecHandler, Handler, LOG, LoadImageHandler;

  Handler = require("./Handler");

  ExecHandler = require("./ExecHandler");

  LOG = LoggerUtil.getLogger("LoadImageHandler");

  LoadImageHandler = class LoadImageHandler extends Handler {
    handle(callback) {
      var dao, down_stat, exec, that;
      that = this;
      if (!this.data.images) {
        LOG.warn(`${argv.project}：没有需要下载的内容`);
        return callback(null);
      }
      dao = new MongoDao(__b_config.dbInfo, {
        epcos: ["entity"]
      });
      exec = new ExecHandler().queue_exec(3);
      down_stat = {
        total: this.data.images.length,
        success: 0,
        exist: 0,
        failure: 0
      };
      return async.each(this.data.images, function(image, cb) {
        return dao.epcos.entity.selectOne({
          deploy_id: image.deploy_id,
          img_name: image.img_name,
          upload_at: image.upload_at
        }, function(err, doc) {
          var rel_path;
          if (err) {
            return cb(err);
          }
          if (doc) {
            down_stat.exist++;
            image.inDB = true;
            image._id = doc._id.toString();
            image.state = doc.state;
            image.isDeploy = doc.isDeploy;
          }
          if (doc && (doc.state === 1 || Math.abs(doc.state) > 1)) {
            return cb(null);
          }
          doc || (image.create_at = moment().format("YYYYMMDDHHmmss"));
          rel_path = image.s_url;
          return mkdirp(rel_path, function(err) {
            var cmd, cmd_display;
            if (err && (image.state = -1)) { //下载失败
              return cb(err);
            }
            cmd = image.d_url;
            if (!cmd.startsWith("curl")) {
              cmd = `curl ${cmd}`;
            }
            cmd = cmd.endsWith("/") ? `${cmd}${image.img_name}` : `${cmd}/${image.img_name}`;
            cmd = `${cmd} -o ${rel_path}${image.img_name}`;
            cmd_display = cmd != null ? cmd.replace(/\s+\-u\s+\S+/g, " -u '***:***'") : void 0; //不打印密码
            LOG.info(`开始下载: ${cmd_display}`);
            return exec(cmd, function(err, stdout, stderr, spent) {
              if (err && (image.state = -1)) { //下载失败
                return cb(err);
              }
              image.state = 1; //已下载
              down_stat.success++;
              return cb(err);
            });
          });
        });
      }, function(err) {
        if (err) {
          LOG.error(JSON.stringify(err));
        }
        down_stat.failure = down_stat.total - down_stat.success - down_stat.exist;
        LOG.info(JSON.stringify(down_stat));
        return callback.apply(this, arguments);
      });
    }

  };

  module.exports = LoadImageHandler;

}).call(this);
