// Generated by CoffeeScript 2.3.2
(function() {
  var ExecHandler, Handler, LOG, LoadOriginalHandler;

  Handler = require("./Handler");

  ExecHandler = require("./ExecHandler");

  LOG = LoggerUtil.getLogger("LoadOriginalHandler");

  LoadOriginalHandler = class LoadOriginalHandler extends Handler {
    handle(param, callback) {
      var dao, exec, original, ref, that;
      that = this;
      if (!param || !param.data) {
        LOG.warn(`${argv.project}：没有需要下载的原件`);
        return typeof callback === "function" ? callback("没有需要下载的原件") : void 0;
      }
      original = param.data;
      if ((ref = param.socket) != null) {
        ref.emit(0, `${original.img_name}：开始下载原件`);
      }
      dao = new MongoDao(__b_config.dbInfo, {
        epcos: ["entity"]
      });
      exec = new ExecHandler().queue_exec(1);
      return dao.epcos.entity.selectOne(original, function(err, doc) {
        var ref1, ref2, ref3, rel_path;
        if (err) {
          return callback(err);
        }
        if (doc) {
          original._id = doc._id.toString();
          original.state = doc.state;
          if ((ref1 = param.socket) != null) {
            ref1.emit(0, `${original.img_name}：文件在数据库存在记录`);
          }
        } else {
          original._id = Utils.uuid(24, 16);
          original.modify = 0;
          original.state = 0;
          original.create_at = moment().format("YYYYMMDDHHmmss");
        }
        if (original.state === 1) {
          if ((ref2 = param.socket) != null) {
            ref2.emit(0, `${original.img_name}：文件状态为-正常`);
          }
          return callback(null, param);
        }
        original.modify === void 0 && (original.modify = 1);
        if (original.state === -1) {
          if ((ref3 = param.socket) != null) {
            ref3.emit(0, `${original.img_name}：文件状态为-异常，将重新加载`);
          }
        }
        rel_path = original.s_url;
        return mkdirp(rel_path, function(err) {
          var cmd, cmd_display, ref4, ref5;
          if (err) {
            LOG.error(err);
            original.state = -1;
            original.record = `创建下载目录失败：${rel_path}`;
            if ((ref4 = param.socket) != null) {
              ref4.emit(-1, `${original.img_name}：创建下载目录失败`);
            }
            return callback(null, param);
          }
          cmd = original.d_url;
          if (!/^dir/.test(cmd) && !/^curl/.test(cmd)) {
            cmd = `curl ${cmd}`;
          }
          cmd = cmd.endsWith("/") ? `${cmd}${original.img_name}` : `${cmd}/${original.img_name}`;
          if (/^dir/.test(cmd)) {
            cmd = cmd + " " + path.resolve(rel_path + original.img_name);
            cmd = cmd.replace("dir", "copy");
            cmd = cmd.replace(/\//g, "\\");
          }
          if (/^curl/.test(cmd)) {
            cmd = `${cmd} -o ${rel_path}${original.img_name}`;
          }
          cmd_display = cmd != null ? cmd.replace(/\s+\-u\s+\S+/g, " -u '***:***'") : void 0; //不打印密码
          LOG.info(`${original.img_name}开始下载: ${cmd_display}`);
          if ((ref5 = param.socket) != null) {
            ref5.emit(0, `${original.img_name}执行下载`);
          }
          return exec(cmd, function(err, stdout, stderr, spent) {
            var ref6, ref7;
            if (err) {
              LOG.error(err);
              original.state = -1; //下载失败
              original.record = `下载命令执行失败：${cmd}`;
              if ((ref6 = param.socket) != null) {
                ref6.emit(-1, `${original.img_name}：下载命令执行失败`);
              }
              LOG.error(`${original.img_name}：下载命令执行失败`);
            } else {
              original.state = 1;
              original.record = "";
              if ((ref7 = param.socket) != null) {
                ref7.emit(0, `${original.img_name}：下载原件完成`);
              }
            }
            LOG.info(`${original.img_name}：下载原件完成`);
            return callback(null, param);
          });
        });
      });
    }

  };

  module.exports = LoadOriginalHandler;

}).call(this);
