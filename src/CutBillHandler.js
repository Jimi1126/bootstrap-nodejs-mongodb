// Generated by CoffeeScript 2.3.2
(function() {
  /*
   *	对分块进行裁剪操作
   */
  var CutBillHandler, ExecHandler, Handler, LOG;

  Handler = require("./Handler");

  ExecHandler = require("./ExecHandler");

  LOG = LoggerUtil.getLogger("CutBillHandler");

  CutBillHandler = class CutBillHandler extends Handler {
    handle(param, callback) {
      var dao, exec, original, ref, ref1, ref2, that;
      that = this;
      if (!param || !param.data) {
        LOG.warn(`${argv.project}：没有原图`);
        return callback("没有原图");
      }
      param.field = [];
      original = param.data;
      if (!param.bill) {
        LOG.warn(`${argv.project}：没有分块`);
        if ((ref = param.socket) != null) {
          ref.emit(-1, `${original.img_name}：没有分块需要切割`);
        }
        return callback(null, param);
      }
      if (original.state !== 1) {
        LOG.warn(`${original.img_name}：字段-原件异常`);
        if ((ref1 = param.socket) != null) {
          ref1.emit(-1, `${original.img_name}：字段-原件异常`);
        }
        return callback(null, param);
      }
      if ((ref2 = param.socket) != null) {
        ref2.emit(0, `${original.img_name}：开始切字段`);
      }
      exec = new ExecHandler().queue_exec(3);
      dao = new MongoDao(__b_config.dbInfo, {
        epcos: ["entity"]
      });
      return async.each(param.bills, function(bill, cb) {
        var bill_path, fields;
        bill_path = bill.path;
        fields = that.data.deploy.fields.filter(function(f) {
          return f.bill === bill.deploy_id;
        });
        return async.each(fields, function(field, cb1) {
          var dbField, field_path;
          field_path = bill_path.replace("bill", "field");
          dbField = {
            deploy_id: field._id.toString(),
            type: "field",
            source_img: bill.source_img,
            source_bill: bill._id,
            code: field.code,
            img_name: field.code + bill.img_name,
            path: field_path
          };
          param.field.push(dbField);
          return dao.epcos.entity.selectOne(dbField, function(err, doc) {
            var ref3, ref4, ref5, ref6;
            if (err) {
              dbField.state = -1;
              dbField.record = "系统异常";
              if ((ref3 = param.socket) != null) {
                ref3.emit(-1, `${original.img_name}-${bill.code}-${dbField.code}：系统异常`);
              }
              return cb1(err);
            }
            if (doc) {
              dbField._id = doc._id.toString();
              dbField.modify = 0;
              dbField.state = doc.state;
              dbField.isDeploy = doc.isDeploy;
              if ((ref4 = param.socket) != null) {
                ref4.emit(0, `${original.img_name}-${bill.code}-${dbField.code}：字段在数据库存在记录`);
              }
            } else {
              dbField._id = Utils.uuid(24, 16);
              dbField.state = 0; //待切图
              dbField.isDeploy = 0;
              dbField.create_at = moment().format("YYYYMMDDHHmmss");
            }
            if (dbField.state === 1) {
              if ((ref5 = param.socket) != null) {
                ref5.emit(0, `${original.img_name}-${bill.code}-${dbField.code}：字段状态为-正常`);
              }
              return cb1(null);
            }
            dbField.modify === void 0 && (dbField.modify = 1);
            if (dbField.state === -1) {
              if ((ref6 = param.socket) != null) {
                ref6.emit(0, `${original.img_name}-${bill.code}-${dbField.code}:字段状态为-异常，将重新加载`);
              }
            }
            return mkdirp(field_path, function(err) {
              var cut_cmd, e, options, ref7, ref8;
              if (err) {
                dbField.state = -1;
                dbField.record = `创建分块切图目录失败：${cut_path}`;
                if ((ref7 = param.socket) != null) {
                  ref7.emit(-1, `${original.img_name}-${bill.code}：创建${dbField.code}分块切图目录失败`);
                }
                return cb1(err);
              }
              options = {
                src: `${bill_path}${bill.img_name}`,
                dst: `${field_path}${field.code + bill.img_name}`,
                x0: field.x0,
                y0: field.y0,
                x1: field.x1,
                y1: field.y1
              };
              cut_cmd = "gmic -v - %(src)s -crop[-1] %(x0)s,%(y0)s,%(x1)s,%(y1)s -o[-1] %(dst)s";
              try {
                cut_cmd = sprintf.sprintf(cut_cmd, options);
              } catch (error) {
                e = error;
                dbField.state = -1;
                dbField.record = `获取切图命令有误：${cut_cmd}`;
                if ((ref8 = param.socket) != null) {
                  ref8.emit(-1, `${original.img_name}-${bill.code}-${dbField.code}：切图失败`);
                }
                return cb1(e);
              }
              return exec(cut_cmd, function(err, stdout, stderr, spent) {
                var ref10, ref11, ref9;
                if (err) {
                  dbField.state = -1;
                  dbField.record = `切图命令执行有误：${cut_cmd}`;
                  if ((ref9 = param.socket) != null) {
                    ref9.emit(-1, `${original.img_name}-${bill.code}-${dbField.code}：切图失败`);
                  }
                  return cb1(err);
                }
                stdout = `${stdout}`.trim();
                stderr = `${stderr}`.trim();
                if (stdout.length > 0) {
                  LOG.info(stdout);
                }
                if (stderr.length > 0) {
                  LOG.info(stderr);
                }
                LOG.info(`${options.src} => ${options.dst} ${spent}ms`);
                dbField.state = 1; //切图完成
                if ((ref10 = param.socket) != null) {
                  ref10.emit(0, `${original.img_name}-${bill.code}-${dbField.code}：切图完成`);
                }
                if ((ref11 = param.socket) != null) {
                  ref11.emit(0, `${original.img_name}-${bill.code}-${dbField.code}：${options.src} => ${options.dst} ${spent}ms`);
                }
                LOG.info(`${options.src} => ${options.dst} ${spent}ms`);
                return cb1(null);
              });
            });
          });
        }, function(err) {
          if (err) {
            LOG.info(err);
          }
          return cb(null);
        });
      }, function(err) {
        if (err) {
          LOG.info(err);
        }
        return callback(null, param);
      });
    }

  };

  module.exports = CutBillHandler;

}).call(this);
