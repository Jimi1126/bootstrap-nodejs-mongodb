// Generated by CoffeeScript 2.3.2
(function() {
  /*
   *	对分块进行裁剪操作
   */
  var CutBillHandler, ExecHandler, Handler, LOG;

  Handler = require("./Handler");

  ExecHandler = require("./ExecHandler");

  LOG = LoggerUtil.getLogger("CutBillHandler");

  CutBillHandler = class CutBillHandler extends Handler {
    handle(callback) {
      var cut_stat, dao, exec, that;
      that = this;
      if (!this.data.bills) {
        LOG.warn(`${argv.project}：没有需要切割的分快`);
        return callback(null);
      }
      this.data.fields = [];
      exec = new ExecHandler().queue_exec(3);
      dao = new MongoDao(__b_config.dbInfo, {
        epcos: ["entity"]
      });
      cut_stat = {
        total: 0,
        success: 0,
        failure: 0,
        exist: 0
      };
      return async.each(this.data.bills, function(bill, cb) {
        var bill_path, fields;
        if (bill.state !== 1 && bill.state !== -2) {
          return cb(null);
        }
        bill_path = bill.path;
        fields = that.data.deploy.fields.filter(function(f) {
          return f.bill === bill.deploy_id;
        });
        return async.each(fields, function(field, cb1) {
          var dbField, field_path;
          field_path = bill_path.replace("bill", "field");
          // field_path = "#{field_path}/#{field.code}/"
          dbField = {
            deploy_id: field._id.toString(),
            type: "field",
            source_img: bill.source_img,
            source_bill: bill._id,
            code: field.code,
            img_name: bill.img_name,
            path: field_path,
            isDeploy: 0
          };
          that.data.fields.push(dbField);
          return dao.epcos.entity.selectOne(dbField, function(err, doc) {
            if (err) {
              return cb1(err);
            }
            if (doc) {
              cut_stat.exist++;
              dbField._id = doc._id.toString();
              dbField.inDB = true;
              dbField.state = doc.state;
              dbField.isDeploy = doc.isDeploy;
            } else {
              dbField._id = Utils.uuid(24, 16);
              dbField.state = 0; //待切图
              dbField.create_at = moment().format("YYYYMMDDHHmmss");
            }
            if (doc && doc.state === 1) {
              return cb2(null);
            }
            return mkdirp(field_path, function(err) {
              var cut_cmd, e, options;
              if (err && (dbField.state = -1)) { //切字段失败
                return cb1(err);
              }
              cut_stat.total++;
              options = {
                src: `${bill_path}${bill.img_name}`,
                dst: `${field_path}${bill.img_name}`,
                x0: field.x0,
                y0: field.y0,
                x1: field.x1,
                y1: field.y1
              };
              cut_cmd = "gmic -v - %(src)s -crop[-1] %(x0)s,%(y0)s,%(x1)s,%(y1)s -o[-1] %(dst)s";
              try {
                cut_cmd = sprintf.sprintf(cut_cmd, options);
              } catch (error) {
                e = error;
                dbField.state = -1; //切字段失败
                cb1(e);
              }
              return exec(cut_cmd, function(err, stdout, stderr, spent) {
                dbField.state = 1; //切字段完成
                if (err && (dbField.state = -1)) { //切字段失败
                  return cb1(err);
                }
                stdout = `${stdout}`.trim();
                stderr = `${stderr}`.trim();
                if (stdout.length > 0) {
                  LOG.info(stdout);
                }
                if (stderr.length > 0) {
                  LOG.info(stderr);
                }
                LOG.info(`${options.src} => ${options.dst} ${spent}ms`);
                cut_stat.success++;
                return cb1(null);
              });
            });
          });
        }, function(err) {
          bill.state = 2; //字段切图完成
          if (err && (bill.state = -2)) { //字段切图失败
            LOG.error(err);
          }
          return cb(null);
        });
      }, function(err) {
        if (err) {
          LOG.error(JSON.stringify(err));
        }
        cut_stat.failure = cut_stat.total - cut_stat.success - cut_stat.exist;
        LOG.info(JSON.stringify(cut_stat));
        return callback.apply(this, arguments);
      });
    }

  };

  module.exports = CutBillHandler;

}).call(this);
