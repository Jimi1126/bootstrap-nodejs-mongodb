// Generated by CoffeeScript 2.3.2
(function() {
  var Context, EnterContext;

  Context = require('./Context');

  EnterContext = class EnterContext extends Context {
    select(param, callback) {
      var dao;
      if (!(param && param.col && param.filter)) {
        return callback("invalid param");
      }
      dao = new MongoDao(__b_config.dbInfo, {
        epcos: param.col
      });
      return dao.epcos[param.col].selectList(param.filter, callback);
    }

    selectByconf(conf, callback) {
      var col, dao, param;
      col = conf.src_type;
      if (!(conf && col && conf.file_id)) {
        return callback("invalid param");
      }
      dao = new MongoDao(__b_config.dbInfo, {
        epcos: col
      });
      param = {};
      param[conf.src_type + "_type"] = conf.file_id;
      return dao.epcos[col].selectList(param, callback);
    }

    save(param, callback) {
      var dao;
      if (!(param && param.col && param.data)) {
        return callback("invalid param");
      }
      dao = new MongoDao(__b_config.dbInfo, {
        epcos: param.col
      });
      return dao.epcos[param.col].insert(param.data, callback);
    }

    update(param, callback) {
      var dao;
      if (!(param && param.col && param.filter)) {
        return callback("invalid param");
      }
      dao = new MongoDao(__b_config.dbInfo, {
        epcos: param.col
      });
      return dao.epcos[param.col].update(param.filter, param.setter, callback);
    }

    delete(param, callback) {
      var dao;
      if (!(param && param.col && param.filter)) {
        return callback("invalid param");
      }
      dao = new MongoDao(__b_config.dbInfo, {
        epcos: param.col
      });
      return dao.epcos[param.col].delete(param.filter, callback);
    }

    getEnterEntity(param, callback) {
      var dao, entitys;
      if (!(param.data && param.data.project && param.data.task && param.data.stage)) {
        return callback("invalid param");
      }
      dao = new MongoDao(__b_config.dbInfo, {
        epcos: "resultData"
      });
      entitys = global.enter.entitys[param.data.project][param.data.task][param.data.stage];
      param.data._id = {
        $nin: (entitys.entering.map(function(d) {
          return d._id;
        })).concat(entitys.data.map(function(d) {
          return d._id;
        }))
      };
      param.filter = param.data;
      param.sort = {
        priority: -1
      };
      return this.getResultData(param, function(err, docs) {
        docs && docs.length < param.limit && (entitys.isEmpty = true);
        err || (entitys.data = entitys.data.concat(docs));
        return callback(err);
      });
    }

    refreshEnterEntity(param, callback) {
      var col, dao, filter;
      if (!param.data || !param.data.src_type) {
        return callback(null);
      }
      col = param.data.src_type;
      dao = new MongoDao(__b_config.dbInfo, {
        epcos: ["deploy", col, "resultData"]
      });
      filter = {};
      filter[col + "_type"] = param.data.file_id;
      return dao.epcos[col].selectList(filter, function(err, entitys) {
        if (err) {
          return callback(err);
        }
        if (!entitys) {
          return callback(null);
        }
        if (!Array.isArray(entitys || entitys.length === 0)) {
          return callback(null);
        }
        return async.each(entitys, function(entity, cb) {
          var enterEntity;
          enterEntity = {
            project: param.data.project,
            field_id: param.data.field_id,
            field_name: param.data.field_name,
            src_type: param.data.src_type,
            verify: param.data.verify,
            enter_conf: entity._id.toString(),
            enter_img_name: entity[col + "_name"],
            enter_img_path: entity.s_url || entity.path,
            state: 0,
            create_at: moment().format("YYYYMMDDHHmmss")
          };
          return dao.epcos.resultData.insert(enterEntity, cb);
        }, callback);
      });
    }

    getResultData(param, callback) {
      var dao;
      if (!param.filter) {
        return callback(null);
      }
      dao = new MongoDao(__b_config.dbInfo, {
        epcos: ["deploy", "task", "resultData"]
      });
      return async.waterfall([
        function(cb) {
          var filter;
          if (param.filter.task) {
            filter = {
              _id: param.filter.task
            };
          } else {
            filter = {
              project: param.filter.project
            };
          }
          return dao.epcos.task.selectList(filter,
        cb);
        },
        function(tasks,
        cb) {
          var filter;
          filter = {
            task: {
              $in: tasks.map(function(t) {
                return t._id.toString();
              })
            }
          };
          return dao.epcos.deploy.selectList(filter,
        function(err,
        docs) {
            if (err) {
              return cb(err);
            }
            if (!docs || !docs.length) {
              return cb(err,
        []);
            }
            filter = {
              image: {
                $in: docs.map(function(im) {
                  return im._id.toString();
                })
              }
            };
            return dao.epcos.deploy.selectList(filter,
        function(err,
        docs2) {
              if (err) {
                return cb(err);
              }
              if (!docs2 || !docs2.length) {
                return cb(err,
        docs);
              }
              return cb(err,
        docs.concat(docs2));
            });
          });
        },
        function(deploys,
        cb) {
          var filter;
          filter = {
            stage: param.filter.stage,
            deploy_id: {
              $in: deploys.map(function(d) {
                return d._id.toString();
              })
            }
          };
          if (param.isCount) {
            return dao.epcos.resultData.count(filter,
        cb);
          } else if (param.isPage) {
            return dao.epcos.resultData.selectBySortOrSkipOrLimit(filter,
        {
              create_at: 1
            },
        +param.skip,
        +param.limit,
        cb);
          } else if (param.isSortAndLimit) {
            return dao.epcos.resultData.selectBySortOrLimit(filter,
        param.sort,
        param.limit,
        cb);
          } else if (param.limit) {
            return dao.epcos.resultData.selectBySortOrLimit(filter,
        param.sort,
        param.limit,
        cb);
          } else {
            return dao.epcos.resultData.selectBySortOrLimit(filter,
        {
              create_at: 1
            },
        -1,
        cb);
          }
        }
      ], callback);
    }

  };

  module.exports = EnterContext;

}).call(this);
