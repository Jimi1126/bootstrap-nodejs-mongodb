// Generated by CoffeeScript 2.3.2
(function() {
  var Context, EnterContext;

  Context = require('./Context');

  EnterContext = class EnterContext extends Context {
    select(param, callback) {
      var dao;
      if (!(param && param.col && param.filter)) {
        return callback("invalid param");
      }
      dao = new MongoDao(__b_config.dbInfo, {
        epcos: param.col
      });
      return dao.epcos.deploy.selectList(param.filter, callback);
    }

    selectByconf(conf, callback) {
      var col, dao, param;
      col = conf.src_type;
      if (!(conf && col && conf.file_id)) {
        return callback("invalid param");
      }
      dao = new MongoDao(__b_config.dbInfo, {
        epcos: col
      });
      param = {};
      param[conf.src_type + "_type"] = conf.file_id;
      return dao.epcos[col].selectList(param, callback);
    }

    save(param, callback) {
      var dao;
      if (!(param && param.col && param.data)) {
        return callback("invalid param");
      }
      dao = new MongoDao(__b_config.dbInfo, {
        epcos: param.col
      });
      return dao.epcos.deploy.insert(param.data, callback);
    }

    update(param, callback) {
      var dao;
      if (!(param && param.col && param.filter)) {
        return callback("invalid param");
      }
      dao = new MongoDao(__b_config.dbInfo, {
        epcos: param.col
      });
      return dao.epcos.deploy.update(param.filter, param.setter, callback);
    }

    delete(param, callback) {
      var dao;
      if (!(param && param.col && param.filter)) {
        return callback("invalid param");
      }
      dao = new MongoDao(__b_config.dbInfo, {
        epcos: param.col
      });
      return dao.epcos.deploy.delete(param.filter, callback);
    }

  };

  module.exports = EnterContext;

}).call(this);
