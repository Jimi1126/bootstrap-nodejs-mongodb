// Generated by CoffeeScript 2.3.2
(function() {
  /*
   * 下载后策略
   */
  var AfterDownStrategy, Istrategy, LOG;

  Istrategy = require("./Istrategy");

  LOG = LoggerUtil.getLogger("AfterDownStrategy");

  AfterDownStrategy = class AfterDownStrategy extends Istrategy {
    constructor(execOrderList, socket) {
      var Handler, i, j, len, moduleName, proxy;
      super();
      this.socket = socket;
      /*
       * 策略的业务数据
       * 通过在实例化操作者过程中提供引用，让所在该策略中的操作者都有权访问
       * 因此一个操作者将访问上一位操作者处理完的数据
       */
      this.data = {};
      //# 操作者名称列表，策略会根据这个顺序调用操作者
      this.handlerList = [];
      if (execOrderList && execOrderList instanceof Array) {
        for (i = j = 0, len = execOrderList.length; j < len; i = ++j) {
          moduleName = execOrderList[i];
          if (!(moduleName || moduleName !== "")) {
            continue;
          }
          Handler = require('./' + moduleName);
          proxy = new HandlerProxy(new Handler(this.data));
          proxy.io = {
            socket: this.socket
          };
          this.handlerList.push(proxy);
        }
      }
    }

    /*
     * 执行策略
     * 下载后策略与下载策略类似，只是不用处理业务数据
     * 默认也是携带全局的业务数据
     */
    execute(callback) {
      var funArr, hand, j, len, ref, that;
      if (this.handlerList.length === 0) {
        return callback();
      }
      that = this;
      ref = this.handlerList;
      for (j = 0, len = ref.length; j < len; j++) {
        hand = ref[j];
        hand.target.data = this.data;
      }
      funArr = this.handlerList.map(function(handle) {
        return handle.handle;
      });
      return async.series(funArr, callback);
    }

  };

  module.exports = AfterDownStrategy;

}).call(this);
