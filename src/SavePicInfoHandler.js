// Generated by CoffeeScript 2.3.2
(function() {
  var ExecHandler, Handler, LOG, SavePicInfoHandler;

  Handler = require("./Handler");

  ExecHandler = require("./ExecHandler");

  LOG = LoggerUtil.getLogger("SavePicInfoHandler");

  SavePicInfoHandler = class SavePicInfoHandler extends Handler {
    handle(callback) {
      var addArr, dao, data, that, updArr;
      that = this;
      dao = new MongoDao(__b_config.dbInfo, {
        epcos: ["entity", "resultData"]
      });
      data = [];
      that.data.images && (data = data.concat(that.data.images));
      that.data.bills && (data = data.concat(that.data.bills));
      that.data.fields && (data = data.concat(that.data.fields));
      if (data.length === 0) {
        return callback(null);
      }
      addArr = data.filter(function(d) {
        return !d.inDB;
      });
      updArr = data.filter(function(d) {
        if (d.inDB) {
          return delete d.inDB;
        } else {
          return false;
        }
      });
      return async.parallel([
        function(cb) {
          if (addArr.length === 0) {
            return cb(null);
          }
          return dao.epcos.entity.insert(addArr,
        cb);
        },
        function(cb) {
          if (updArr.length === 0) {
            return cb(null);
          }
          return async.eachLimit(updArr,
        50,
        function(dd,
        cb1) {
            return dao.epcos.entity.update({
              _id: dd._id
            },
        dd,
        cb1);
          },
        cb);
        },
        function(cb) {
          if (that.data.enterEntitys.length === 0) {
            return cb(null);
          }
          return dao.epcos.resultData.insert(that.data.enterEntitys,
        cb);
        }
      ], function(err) {
        if (err) {
          LOG.error(JSON.stringify(err));
        }
        return callback(null);
      });
    }

  };

  module.exports = SavePicInfoHandler;

}).call(this);
