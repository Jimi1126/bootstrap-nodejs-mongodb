// Generated by CoffeeScript 2.3.2
(function() {
  var DownloadContext, EnterContext, LOG, SocketIORouter;

  EnterContext = require("./EnterContext");

  DownloadContext = require("./DownloadContext");

  LOG = LoggerUtil.getLogger("SocketIORouter");

  SocketIORouter = class SocketIORouter {
    router(socket) {
      socket.use(function(packet, next) {
        return next();
      });
      // str = socket.request.headers.cookie || ""
      // index = str.indexOf("login=s%3A")
      // return socket.emit "unlogin" if index is -1
      // sessionid = str.substring index + 10, index + 42
      // if global?.sessions?[sessionid] and global.sessions[sessionid].cookie.maxAge > 0
      // 	global.sessions[sessionid]._garbage = Date()
      // 	global.sessions[sessionid].touch()
      // 	next()
      // else unless global.sessions?[sessionid]
      // 	socket.emit "unlogin"
      // else
      // 	socket.emit "overTime", true
      // 检查登陆是否超时
      socket.on("checkOverTime", function() {
        var checkOverTime, cookie, index, sessionid, str, that;
        that = this;
        str = this.request.headers.cookie || "";
        index = str.indexOf("login=s%3A");
        sessionid = str.substring(index + 10, index + 42);
        cookie = global.sessions[sessionid].cookie;
        checkOverTime = function() {
          return setTimeout(function() {
            if (cookie.maxAge > 0) {
              return checkOverTime(cookie.maxAge);
            } else {
              return that.emit("overTime", true);
            }
          }, cookie.maxAge);
        };
        return checkOverTime();
      });
      // 更新超时窗口
      socket.on("refreshOverTime", function() {
        return socket.emit("overTime", false);
      });
      // 更新录入对象配置
      socket.on("refreshEnterEntity", function(configs, callback) {
        var conf, confMap, context, i, len, project, that;
        that = this;
        project = configs[0].project;
        confMap = {};
        for (i = 0, len = configs.length; i < len; i++) {
          conf = configs[i];
          confMap[conf.file_id] || (confMap[conf.file_id] = []);
          confMap[conf.file_id].push({
            field_id: conf.field_id,
            field_name: conf.field_name,
            src_type: conf.src_type,
            value: {},
            tip: ""
          });
        }
        context = new EnterContext();
        return async.eachOfSeries(confMap, function(v, k, cb) {
          return context.select({
            col: "resultData",
            filter: {
              deploy_id: k,
              stage: "ocr"
            }
          }, function(err, docs) {
            if (err) {
              that.emit("refreshProgress", true, `${k}：更新失败\n${err}`);
              return cb(null);
            }
            if (docs && docs.length > 0) {
              that.emit("refreshProgress", false, `${k}：存在${docs.length}个录入配置，正在更新配置`);
              return context.update({
                col: "resultData",
                filter: {
                  deploy_id: k,
                  stage: "ocr"
                },
                setter: {
                  enter: v
                }
              }, function(err) {
                if (err) {
                  that.emit("refreshProgress", true, `${k}：更新失败\n${err}`);
                } else {
                  that.emit("refreshProgress", true, `${k}：更新成功`);
                }
                return cb(null);
              });
            } else {
              return context.select({
                col: "entity",
                filter: {
                  deploy_id: k,
                  isDeploy: 0
                }
              }, function(err, docs) {
                var enterEntitys, entity, j, len1;
                if (err) {
                  that.emit("refreshProgress", true, `${k}：更新失败\n${err}`);
                  return cb(null);
                }
                if (docs && docs.length > 0) {
                  that.emit("refreshProgress", false, `${k}：存在${docs.length}个录入对象，正在新增录入配置`);
                  enterEntitys = [];
                  for (j = 0, len1 = docs.length; j < len1; j++) {
                    entity = docs[j];
                    enterEntitys.push({
                      _id: Utils.uuid(24, 16),
                      project: project,
                      deploy_id: entity.deploy_id,
                      code: entity.code,
                      source_img: entity.source_img,
                      path: entity.path,
                      img_name: entity.img_name,
                      enter: v,
                      stage: "ocr",
                      priority: "1",
                      create_at: moment().format("YYYYMMDDHHmmss")
                    });
                  }
                  return context.save({
                    col: "resultData",
                    data: enterEntitys
                  }, function(err) {
                    if (err) {
                      that.emit("refreshProgress", true, `${k}：新增失败\n${err}`);
                    } else {
                      that.emit("refreshProgress", true, `${k}：新增成功`);
                    }
                    return cb(null);
                  });
                } else {
                  that.emit("refreshProgress", true, `${k}：未找到该配置录入对象`);
                  return cb(null);
                }
              });
            }
          });
        }, function(err) {});
      });
      // 释放录入实体
      socket.on("letEnterEntity", function(data, callback) {
        var entitys, freeObj;
        if (!data || !data.project || !data.stage || !global.enter) {
          return typeof callback === "function" ? callback("failed") : void 0;
        }
        entitys = global.enter.entitys[data.project][data.stage];
        freeObj = (entitys.entering.splice(entitys.entering.findIndex(function(en) {
          return en && en._id.toString() === data._id;
        }), 1))[0];
        freeObj && entitys.data.unshift(freeObj);
        return typeof callback === "function" ? callback("success") : void 0;
      });
      // 提交录入
      socket.on("submitEnter", function(data, callback) {
        var context, e, en, entitys, i, len, rankArr, ref;
        if (!data || !data.project || !data.stage) {
          return typeof callback === "function" ? callback("failed") : void 0;
        }
        rankArr = ["ocr", "op1", "op2", "op3", "op4", "over"];
        try {
          entitys = global.enter.entitys[data.project][data.stage];
          entitys.entering.splice(entitys.entering.findIndex(function(en) {
            return en._id.toString() === data._id;
          }), 1);
          if (data.stage === "op2") {
            ref = data.enter;
            for (i = 0, len = ref.length; i < len; i++) {
              en = ref[i];
              if (en.value["op1"] !== en.value["op2"]) {
                data.stage = "no";
              }
            }
            data.stage === "op2" && (data.stage = "over");
            data.stage === "no" && (data.stage = "op3");
          } else {
            data.stage = rankArr[(rankArr.findIndex(function(r) {
              return r === data.stage;
            })) + 1];
          }
          entitys = global.enter.entitys[data.project][data.stage];
          entitys && (entitys.isEmpty = false);
          context = new EnterContext();
          return context.update({
            col: "resultData",
            filter: {
              _id: data._id
            },
            setter: data
          }, callback);
        } catch (error) {
          e = error;
          return callback(e);
        }
      });
      // 下载与解析
      // socket.removeAllListeners "startDownAndParse"
      socket.on("startDownAndParse", function(image) {
        var context, d_socket, that;
        that = this;
        context = new DownloadContext();
        d_socket = {
          emit: function(flag, logInfo) {
            return that.emit("downAndParseProgress", flag, logInfo);
          },
          on: function() {
            return that.on.apply(that, arguments);
          }
        };
        return context.execute(image, d_socket, function(err) {
          if (err) {
            LOG.error(err);
            that.emit("downAndParseProgress", "error", err);
          }
          that.emit("downAndParseProgress", "final");
          return that.removeAllListeners("startDownAndParse");
        });
      });
      return socket.on("disconnect", function() {});
    }

  };

  module.exports = SocketIORouter;

}).call(this);
